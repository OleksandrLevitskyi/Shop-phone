{"ast":null,"code":"const initState = {\n  items: {},\n  totalPrice: 0,\n  totalItems: 0\n};\n\nconst getTotalPrice = arr => arr.reduce((sum, obj) => obj.cost + sum, 0);\n\nconst _get = (obj, path) => {\n  const [firstKey, ...keys] = path.split('.');\n  return keys.reduce((val, key) => {\n    return val[key];\n  }, obj[firstKey]);\n};\n\nconst getTotalSum = (obj, path) => {\n  return Object.values(obj).reduce((sum, obj) => {\n    const value = _get(obj, path);\n\n    return sum + value;\n  }, 0);\n};\n\nfunction basket(state = initState, action) {\n  switch (action.type) {\n    case \"ADD_PRODUCT_BASKET\":\n      {\n        const currentProductItems = !state.items[action.payload.id] ? [action.payload] : [...state.items[action.payload.id].items, action.payload];\n        const newObj = { ...state.items,\n          [action.payload.id]: {\n            items: currentProductItems,\n            totalPrice: getTotalPrice(currentProductItems)\n          }\n        };\n        const items = Object.values(newObj).map(obj => obj.items);\n        const arrProduct = [].concat.apply([], items);\n        const totalPrice = getTotalPrice(arrProduct);\n        return { ...state,\n          items: newObj,\n          totalItems: arrProduct.length,\n          totalPrice\n        };\n      }\n\n    case 'PLUS_CART_ITEM':\n      {\n        const newObjItems = [...state.items[action.payload].items, state.items[action.payload].items[0]];\n        const newItems = { ...state.items,\n          [action.payload]: {\n            items: newObjItems,\n            totalPrice: getTotalPrice(newObjItems)\n          }\n        };\n        const totalItems = getTotalSum(newItems, 'items.length');\n        const totalPrice = getTotalSum(newItems, 'totalPrice');\n        return { ...state,\n          items: newItems,\n          totalItems,\n          totalPrice\n        };\n      }\n\n    case 'MINUS_CART_ITEM':\n      {\n        const oldItems = state.items[action.payload].items;\n        const newObjItems = oldItems.length > 1 ? state.items[action.payload].items.slice(1) : oldItems;\n        const newItems = { ...state.items,\n          [action.payload]: {\n            items: newObjItems,\n            totalPrice: getTotalPrice(newObjItems)\n          }\n        };\n        const totalItems = getTotalSum(newItems, 'items.length');\n        const totalPrice = getTotalSum(newItems, 'totalPrice');\n        return { ...state,\n          items: newItems,\n          totalItems,\n          totalPrice\n        };\n      }\n\n    default:\n      return state;\n  }\n}\n\nexport default basket;","map":{"version":3,"sources":["/Users/sashalevitskiy/Desktop/MyProjects/technical_test/src/redux/reducers/basket.js"],"names":["initState","items","totalPrice","totalItems","getTotalPrice","arr","reduce","sum","obj","cost","_get","path","firstKey","keys","split","val","key","getTotalSum","Object","values","value","basket","state","action","type","currentProductItems","payload","id","newObj","map","arrProduct","concat","apply","length","newObjItems","newItems","oldItems","slice"],"mappings":"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","sourcesContent":["const initState = {\n  items: {},\n  totalPrice: 0,\n  totalItems: 0,\n};\n\nconst getTotalPrice = arr => arr.reduce((sum, obj) => obj.cost + sum, 0)\n\nconst _get = (obj, path) => {\n  const [firstKey, ...keys] = path.split('.');\n  return keys.reduce((val, key) => {\n    return val[key];\n  }, obj[firstKey]);\n};\n\nconst getTotalSum = (obj, path) => {\n  return Object.values(obj).reduce((sum, obj) => {\n    const value = _get(obj, path);\n    return sum + value;\n  }, 0);\n};\n\nfunction basket(state = initState, action) {\n  switch (action.type) {\n    case \"ADD_PRODUCT_BASKET\": {\n        const currentProductItems = !state.items[action.payload.id]\n        ? [action.payload]\n        : [...state.items[action.payload.id].items, action.payload];\n\n      const newObj = {\n        ...state.items,\n        [action.payload.id]: {\n            items: currentProductItems,\n            totalPrice: getTotalPrice(currentProductItems)\n        },\n      };\n      const items = Object.values(newObj).map(obj => obj.items)\n      const arrProduct = [].concat.apply([], items);\n      const totalPrice = getTotalPrice(arrProduct);\n      return {\n        ...state,\n        items: newObj,\n        totalItems: arrProduct.length,\n        totalPrice,\n      };\n    }\n    case 'PLUS_CART_ITEM': {\n      const newObjItems = [\n        ...state.items[action.payload].items,\n        state.items[action.payload].items[0],\n      ];\n      const newItems = {\n        ...state.items,\n        [action.payload]: {\n          items: newObjItems,\n          totalPrice: getTotalPrice(newObjItems),\n        },\n      };\n\n      const totalItems = getTotalSum(newItems, 'items.length');\n      const totalPrice = getTotalSum(newItems, 'totalPrice');\n\n      return {\n        ...state,\n        items: newItems,\n        totalItems,\n        totalPrice,\n      };\n    }\n    case 'MINUS_CART_ITEM': {\n      const oldItems = state.items[action.payload].items;\n      const newObjItems =\n        oldItems.length > 1 ? state.items[action.payload].items.slice(1) : oldItems;\n      const newItems = {\n        ...state.items,\n        [action.payload]: {\n          items: newObjItems,\n          totalPrice: getTotalPrice(newObjItems),\n        },\n      };\n\n      const totalItems = getTotalSum(newItems, 'items.length');\n      const totalPrice = getTotalSum(newItems, 'totalPrice');\n\n      return {\n        ...state,\n        items: newItems,\n        totalItems,\n        totalPrice,\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nexport default basket;\n"]},"metadata":{},"sourceType":"module"}